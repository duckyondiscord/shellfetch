#!/usr/bin/env bash
# Set the variables to get distro name, distro id, etc
# shellcheck disable=SC1091
source /etc/os-release
packages=0
memory_unit="gib"
termwidth="$(stty size | cut -d" " -f2)"

# set colors
resetColor=$(tput sgr0)
boldText=$(tput bold)

#color of text
sysPageColor=$(tput setaf 6)

# banner color
bannerTextColor=$(tput setaf 2)

function center {
    padding="$(printf '%0.0000001s' ' '{1..500})"
    printf '%*.*s %s %*.*s\n' 0 "$(((termwidth - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((termwidth - 1 - ${#1}) / 2))" "$padding"
}

# Use the package manager to get amount of installed packages
if [ -x "$(command -v apk)" ]; then
    ((packages = packages + $(apk list --installed | wc -l)))
elif [ -x "$(command -v apt)" ]; then
    ((packages = packages + $(apt list --installed | wc -l)))
elif [ -x "$(command -v dnf)" ]; then
    ((packages = packages + $(dnf list --installed | grep -c -v '^Installed Packages$')))
elif [ -x "$(command -v pacman)" ]; then
    ((packages = packages + $(pacman -Q | wc -l)))
elif [ -x "$(command -v zypper)" ]; then
    ((packages = packages + $(zypper search -i | wc -l)))
elif [ -x "$(command -v emerge)" ]; then
    ((packages = packages + $(find /var/db/pkg/* | wc -l)))
elif [ -x "$(command -v nix-store)" ]; then
    ((packages = packages + $(nix-store -q --references /var/run/current-system/sw | cut -d'-' -f2- | wc -l)))
elif [ -x "$(command -v xbps-query)" ]; then
    ((packages = packages + $(xbps-query -l | awk '{ print $2 }' | xargs -n1 xbps-uhelper getpkgname | wc -l)))
else
    echo "wtf no package manager?!"
    exit 1
fi

# Set variables
# Get the host hardware
read -r version </sys/devices/virtual/dmi/id/product_version
read -r name </sys/devices/virtual/dmi/id/product_name
read -r mobovendor </sys/devices/virtual/dmi/id/board_vendor
read -r mobo </sys/devices/virtual/dmi/id/board_name
host="$mobovendor $name $version $mobo"

# Remove generic names
for word; do
    case $word in
    To | [Bb]e | [Ff]illed | [Bb]y | O.E.M. | OEM | \
        Not | Applicable | Specified | System | Product | Name | \
        Version | Undefined | Default | string | INVALID | ï¿½ | os | \
        Type1ProductConfigId)
        continue
        ;;
    esac
    host="$host$word "
done

# It works so don't touch
gpu=$(lspci -mm | awk -O -F '\"|\" \"|\\(' \ '/"Display|"3D|"VGA/ {a[$0] = $1 " " $3 " " ($(NF-1) ~ /^$|^Device [[:xdigit:]]+$/ ? $4 : $(NF-1))} END { for (i in a) { if (!seen[a[i]]++) { sub("^[^ ]+ ", "", a[i]);print a[i]}}}')
res="$(xrandr | grep '*' | awk '{print $1}')"
user_hostname="$(whoami) on $HOSTNAME"
cpumodel=$(lscpu | grep "Model name" | cut -c 34-)
kernel=$(uname -r)
uptime=$(uptime -p | cut -c 4-)
while IFS=":" read -r line; do
    mem_used="$(echo "$line" | awk -O '{print $3}')"
    mem_total="$(echo "$line" | awk -O '{print $2}')"
done <<<"$(free -k | grep Mem)"

mem_used="$((mem_used / 1024))"
mem_total="$((mem_total / 1024))"

case $memory_unit in
gib)
    mem_used=$(awk '{printf "%.2f", $1 / $2}' <<<"$mem_used 1024")
    mem_total=$(awk '{printf "%.2f", $1 / $2}' <<<"$mem_total 1024")
    mem_label=GiB
    ;;

kib)
    mem_used=$((mem_used * 1024))
    mem_total=$((mem_total * 1024))
    mem_label=KiB
    ;;
esac

memory="${mem_used}${mem_label:-MiB} / ${mem_total}${mem_label:-MiB} ${mem_perc:+(${mem_perc}%)}"

diskcmd=$(mount | grep '^/')
disks=$(while read -r line; do df -h "$(echo "$line" | awk -O '{print $3}')" | grep '/'; done <<<"$diskcmd")
disk_size=$(df -h / | grep "/dev" | awk -O '{print $2}')

figlet=$(figlet "$NAME")

function printCenter() {
    # Print everything
    echo -e "$boldText $bannerTextColor"
    while read -r line; do
        center "$line "
    done <<<"$figlet"
    echo -e "$resetColor $sysPageColor"
    center "Host: $host"
    center "User: $user_hostname"
    center "Distro: $PRETTY_NAME"
    center "Kernel: $kernel"
    center "Architecture: $(uname -m)"
    center "Packages: $packages"
    center "CPU: $cpumodel"
    [[ $(echo "$gpu" | wc -l) -gt 1 ]] && while read -r line; do center "GPU: ${line}"; done <<<"$gpu" || center "GPU:$gpu"
    center "Shell: $SHELL"
    center "Uptime: $uptime"
    center "Ram Usage: ${memory}"
    while read -r line; do
        disk_used=$(echo "$line" | awk -O '{print $3}')
        disk_size=$(echo "$line" | awk -O '{print $2}')
        disk=$(echo "$line" | awk -O '{print $6}')
        center "Partition $disk Usage: $disk_used/$disk_size"
    done <<<"$disks"
    [[ $(echo "$res" | wc -l) -gt 1 ]] && while read -r line; do center "resolution: ${line}"; done <<<"$res" || center "resolution:$res"
    center "terminal: ${TERM//xterm-/}"
}

function printLeft() {
    # Print everything
    echo -e "$boldText $bannerTextColor"
    figlet "$NAME"
    echo -e "$resetColor $sysPageColor"
    echo "Host: $host"
    echo "User: $user_hostname"
    echo "Distro: $PRETTY_NAME"
    echo "Kernel: $kernel"
    echo "Architecture: $(uname -m)"
    echo "Packages: $packages"
    echo "CPU: $cpumodel"
    [[ $(echo "$gpu" | wc -l) -gt 1 ]] && while read -r line; do echo "GPU: ${line}"; done <<<"$gpu" || echo "GPU:$gpu"
    echo "Shell: $SHELL"
    echo "Uptime: $uptime"
    echo "Ram Usage: ${memory}"
    while read -r line; do
        disk_used=$(echo "$line" | awk -O '{print $3}')
        disk_size=$(echo "$line" | awk -O '{print $2}')
        disk=$(echo "$line" | awk -O '{print $6}')
        echo "Partition $disk Usage: $disk_used/$disk_size"
    done <<<"$disks"
    [[ $(echo "$res" | wc -l) -gt 1 ]] && while read -r line; do echo "resolution: ${line}"; done <<<"$res" || echo "resolution:$res"
    echo "terminal: ${TERM//xterm-/}"
}

while true; do
    case $1 in
    -c | --center)
        printCenter
        exit 0
        ;;
    *)
        printLeft
        exit 0
        ;;
    esac
done
